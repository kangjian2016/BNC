% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulatedDatasetGenerator.R
\name{SimulatedDatasetGenerator}
\alias{SimulatedDatasetGenerator}
\alias{simulatedDatasetGenerator}
\title{{Simulated dataset generator}}
\usage{
simulatedDatasetGenerator(net=NULL,nnode=NULL,maxpernull=0.7,class.label=NULL,
missloc=NULL,missing=FALSE,missrate=0.1,nonmiss.hub.maxedges=7,
maxnsteps.merge.communties=1000,dist=c("norm","gamma","lognorm"),
plot=c(TRUE,FALSE),nbin=c(20,20,20),rng=1024)
}
\arguments{
\item{net}{The binary adjacent matrix representing the gene network configuration. The element at (i,j) location of value 0 indicating "gene i and gene j are connected" or "gene i and gene j are not directly connected". If not given, generate a scale-free graph according to the Barabasi-Albert model by applying the BA algorithm in the igraph package.}

\item{nnode}{An integer. Total number of gene nodes in network.}

\item{maxpernull}{A float number. The highest tolerable proportion of null genes in the network. Used when class.label is not given and it needs to be generated during the merging process. The default is 0.7}

\item{class.label}{A vector of length equals the total number of gene nodes. Each element in the vector represents the class label of each gene regulation type (can be -1, 0, 1). If it is not given, the class labels are defined based on the fast greedy community detection algorithm. Then the communities are merged into three class each one at a time based on their number of between-community-edges. Highly connected communities are merged into one first. Then the largest communities are assigned a class label of 0 to represent the null genes. The up/down regulated class are assigned randomly afterwards}

\item{missloc}{A vector. It gives the location of the test statistics vector that is not been observed. The default is NULL}

\item{missing}{Logical. If TRUE, the missing locations are generated based on the missing rate. The default is FALSE}

\item{missrate}{A number between (0,1). The missing rate is defined as the proportion of gene nodes without observed test statistics. We do not recommend users to set this rate above 20\% because it is less likely to be the real data based on our own biological knowledge}

\item{nonmiss.hub.maxedges}{An integer. Based on our knowledge, a  hub gene (a gene with a larger number of neighboring edges) is less likely to be a missing gene node. This is the upper bound where only genes with less than the nonmiss.hub.maxedges neighbors can be assigned as missing genes in the simulation studies. The default is 7}

\item{maxnsteps.merge.communties}{An integer. It is the maximum number of steps used for merging the smaller communities in the merging process. The default is 1000}

\item{dist}{A string. The distribution of differentially expressed genes (non-null genes). It can be one of the following: "norm", "gamma" or "lognorm". See details in the simulation design table}

\item{plot}{Logical. The default is TRUE. Whether to plot the histogram of test statistics being generated or not in the end}

\item{nbin}{A vector of length 3. The default is c(5,20,5). The number of bins used for plotting the histogram for each of the class: class label = -1, 0, 1}

\item{rng}{Random seed, the default is 1024}
}
\value{
A list contains
\item{testcov}{The test statistics, missing observations are coded as NA if any}
\item{testcov.fullobs}{The test statistics when all the observations are fully observed}
\item{class.label}{The vector stores the class label for genes. The z values in the paper}
\item{net}{The simulated network, represented as a binary adjacency matrix 1/0}
}
\description{
The function used to generating simulated datasets. See details in simulation studies
}
\details{
The function is used for simulating the test statistics:
\itemize{
\item network is given or generated by Barabasi-Albert algorithm in igraph package.
\item class indicators is given or generated based on fast.greedy community detection algorithm.
\item test statistics, currently support three simulation scenario: c("norm","gamma","lognorm")
}
}
\examples{
\dontrun{
## The simulation settings based on real gene network. (takes time)
data(geneNetwork)
data(classLabels)
data(missingLocations)
simdata=simulatedDatasetGenerator(net=geneNetwork,class.label=classLabels,
missloc=missingLocations,missing=TRUE,dist="norm",plot=TRUE,nbin=c(20,20,20),rng=1024)
str(simdata)
## A toy example
simdata=simulatedDatasetGenerator(nnode=100,missing=TRUE,missrate=0.1,dist="norm",
plot=TRUE,nbin=c(20,20,10),rng=1024)
str(simdata)
}
}
